[mysqld]
################ General ##################
# 实例使用的用户为mysql
user = mysql

## 服务端口为3300
port = 3300

#socket连接句柄位置
socket = /home/mysql/3300/conn/mysql.3300.sock

# 数据库进程pid文件位置
pid-file = /home/mysql/3300/conn/mysql.3300.pid

# Path to MySQL installation directory
# 数据库安装位置
basedir = /home/mysql/3300/mysql

# Path to data directory
# 数据文件存储的位置
datadir = /home/mysql/3300/data

# 临时空间
tmpdir = /home/mysql/3300/tmp

#If set to 0, table names are stored as specified and comparisons are case sensitive. If set to 1, table names are stored in lowercase on disk and comparisons are not case sensitive. If set to 2, table names are stored as given but compared in lowercase. 
#If you are using InnoDB tables, you should set this variable to 1 on all platforms to force names to be converted to lowercase.
# 不区分表名的大小写
lower_case_table_names = 1

# 配置的允许打开的最大的文件数，实际值还依赖于操作系统的限制
open_files_limit = 10240

# 建表策略：如果指定的引擎不对，使用innodb引擎
sql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 

#init_connect='SET NAMES utf8'
# 默认字符集为utf8
character-set-server = utf8
# 字符集比较规则,在order by排序之类的场景起作用
collation_server = utf8_bin

# 全局性能
#设定禁止进行DNS反向查询
skip-name-resolve
#忽略由外部锁定，导致的等待，单服务器环境设定，多服务器环境时应注释
skip-external-locking
# 二进制日志刷新策略，0代表不强制刷新至磁盘，交给文件系统来做，性能最好；1则是最安全的，即使系统down掉，最多只会丢失一次提交的二进制日志，当然，性能最差
sync_binlog = 0
# The number of open tables for all threads. Increasing this value
# increases the number of file descriptors that mysqld requires.
# Therefore you have to make sure to set the amount of open files
# allowed to at least 4096 in the variable "open-files-limit" in
# section [mysqld_safe]
# The number of open tables for all threads
# 所有线程打开表综合上线
table_open_cache = 3000 

#记录网络连接日志的数量，和操作系统共同起作用
back_log = 50
#最大的连接数量
max_connections = 1000
#每个终端连接错误重试的数量
max_connect_errors = 10000

#################### 日志部分配置############

# Enable binary logging. This is required for acting as a MASTER in a
# replication configuration. You also need the binary log if you need
# the ability to do point in time recovery from your latest backup.
# 二进制日志文件模式
log_bin = /home/mysql/3300/log/binlog/mysql-bin

# 二进制日志文件模式，采用折中策略的混合模式
binlog_format=mixed

# 错误日志
log_output = FILE
log_error = /home/mysql/3300/log/error/mysql-error.log

# 日志文件保留天数
expire_logs_days = 7
# Log slow queries. Slow queries are queries which take more than the
# amount of time defined in "long_query_time" or which do not use
# indexes well, if log_short_format is not enabled. It is normally good idea
# to have this turned on if you frequently add new queries to the
# system.
# 打开慢日志，用于优化
slow_query_log = 1

# All queries taking more than this amount of time (in seconds) will be
# trated as slow. Do not use "1" as a value here, as this will result in
# even very fast queries being logged from time to time (as MariaDB
# currently measures time with second accuracy only).
# 慢日志阀值60秒，默认2秒...
long_query_time = 60
# 慢日志目录
slow_query_log_file = /home/mysql/3300/log/slow_query/slow_query.log

# 通用日志查询: 测试时，该参数导致磁盘开销巨大，因此注释掉
#general_log = 1
#general_log_file = /home/mysql/3201/log/general_query/general_query.log

# The size of the cache to hold the SQL statements for the binary log
# during a transaction. If you often use big, multi-statement
# transactions you can increase this value to get more performance. All
# statements from transactions are buffered in the binary log cache and
# are being written to the binary log at once after the COMMIT.  If the
# transaction is larger than this value, temporary file on disk is used
# instead.  This buffer is allocated per connection on first update
# statement in transaction
#看起来是事务日志缓存大小，由于etl数据需要大量的数据，所以把这个二进制缓存变大，默认1M
binlog_cache_size = 16M
# 最大binlog缓存大小
max_binlog_cache_size = 128M
# 最大binlog大小 
max_binlog_size = 1G
# 管理语句二进制cache大小
binlog_stmt_cache_size = 32M


################ MyISAM引擎########
#批量插入时使用内存的大小
bulk_insert_buffer_size = 128M

#索引缓冲区大小，只对ISAM表起作用，huge模板对应的是384M#索引缓冲区大小，只对ISAM表起作用，huge模板对应的是384M
key_buffer_size = 512M

# The maximum size of a query packet the server can handle as well as
# maximum query size server can process (Important when working with
# large BLOBs).  enlarged dynamically, for each connection.
#最大单次查询所占用的内存大小，默认16M
max_allowed_packet = 256M

# Maximum allowed size for a single HEAP (in memory) table. This option
# is a protection against the accidential creation of a very large HEAP
# table which could otherwise use up all memory resources.
#最大堆内存表大小，使用默认值
max_heap_table_size = 256M

# Size of the buffer used for doing full table scans.
# Allocated per thread, if a full scan is needed.
# 每个线程在全表扫描时的默认缓存,使用默认值
read_buffer_size = 2M

# When reading rows in sorted order after a sort, the rows are read
# through this buffer to avoid disk seeks. You can improve ORDER BY
# performance a lot, if set this to a high value.
# Allocated per thread, when needed.
#order by的排序缓存，有效提高order by的性能，使用默认值
read_rnd_buffer_size = 16M

# Sort buffer is used to perform sorts for some ORDER BY and GROUP BY
# queries. If sorted data does not fit into the sort buffer, a disk
# based merge sort is used instead - See the "Sort_merge_passes"
# status variable. Allocated per thread if sort is needed.
#order by和group by 合并时的缓存内存值，默认值为8，使用huge版本的值64
sort_buffer_size = 64M

# This buffer is used for the optimization of full JOINs (JOINs without
# indexes). Such JOINs are very bad for performance in most cases
# anyway, but setting this variable to a large value reduces the
# performance impact. See the "Select_full_join" status variable for a
# count of full JOINs. Allocated per thread if full join is found
#关联查询时，没有使用索引时的缓存值，使用默认值
join_buffer_size = 8M

# How many threads we should keep in a cache for reuse. When a client
# disconnects, the client's threads are put in the cache if there aren't
# more than thread_cache_size threads from before.  This greatly reduces
# the amount of thread creations needed if you have a lot of new
# connections. (Normally this doesn't give a notable performance
# improvement if you have a good thread implementation.)
# 客户端线程缓存数量
thread_cache_size = 8

# This permits the application to give the threads system a hint for the
# desired number of threads that should be run at the same time.  This
# value only makes sense on systems that support the thread_concurrency()
# function call (Sun Solaris, for example).
# You should try [number of CPUs]*(2..4) for thread_concurrency
# 虚拟机单核，乘以线程数量.
thread_concurrency = 2 

# Query cache is used to cache SELECT results and later return them
# without actual executing the same query once again. Having the query
# cache enabled may result in significant speed improvements, if your
# have a lot of identical queries and rarely changing tables. See the
# "Qcache_lowmem_prunes" status variable to check if the current value
# is high enough for your load.
# Note: In case your tables change very often or if your queries are
# textually different every time, the query cache may result in a
# slowdown instead of a performance improvement.
#用于同一条SQL，相同参数反复查询的情况
query_cache_size = 128M

# Only cache result sets that are smaller than this limit. This is to
# protect the query cache of a very large result set overwriting all
# other query results.
#不缓存结果集大于这个值的结果集，使用默认值
query_cache_limit = 2M

# Minimum word length to be indexed by the full text search index.
# You might wish to decrease it if you need to search for shorter words.
# Note that you need to rebuild your FULLTEXT index, after you have
# modified this value.
#使用full text index时最少词数
ft_min_word_len = 4

# Table type which is used by default when creating new tables, if not
# specified differently during the CREATE TABLE statement.
# 默认使用INNODB引擎，故注释掉


# Thread stack size to use. This amount of memory is always reserved at
# connection time. MariaDB itself usually needs no more than 64K of
# memory, while if you use your own stack hungry UDF functions or your
# OS requires more stack for some operations, you might need to set this
# to a higher value.
# 线程堆内存，用途未详细研讨
thread_stack = 240K

# Set the default transaction isolation level. Levels available are:
# READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE
# 调整默认事务隔离级别为READ-COMMITTED
transaction_isolation = READ-COMMITTED

# Maximum size for internal (in-memory) temporary tables. If a table
# grows larger than this value, it is automatically converted to disk
# based table This limitation is for a single table. There can be many
# of them.
#内存中临时表的大小，大于这个值则写入文件系统
tmp_table_size = 128M


# Print warnings to the error log file.  If you have any problem with
# MariaDB you should enable logging of warnings and examine the error log
# for possible explanations. 
#打开警告日志
log_warnings

# Enable the full query log. Every query (even ones with incorrect
# syntax) that the server receives will be logged. This is useful for
# debugging, it is usually disabled in production use.
# 不打开所有日志
# #log


##############Innodb 部分###################
# *** INNODB Specific options ***
# Use this option if you have a MariaDB server with InnoDB support enabled
# but you do not plan to use it. This will save memory and disk space
# and speed up some things.
#skip-innodb
# 0：使用共享表空间模式，1使用独占表空间模式，重要
innodb_file_per_table = 1
# Additional memory pool that is used by InnoDB to store metadata
# information.  If InnoDB requires more memory for this purpose it will
# start to allocate it from the OS.  As this is fast enough on most
# recent operating systems, you normally do not need to change this
# value. SHOW INNODB STATUS will display the current amount used.
#使用默认值，该值已经将弃用，建议使用innodb_use_sys_malloc参数
innodb_additional_mem_pool_size = 16M

# InnoDB, unlike MyISAM, uses a buffer pool to cache both indexes and
# row data. The bigger you set this the less disk I/O is needed to
# access data in tables. On a dedicated database server you may set this
# parameter up to 80% of the machine physical memory size. Do not set it
# too large, though, because competition of the physical memory may
# cause paging in the operating system.  Note that on 32bit systems you
# might be limited to 2-3.5G of user level memory per process, so do not
# set it too high.
#使用默认值
innodb_buffer_pool_size = 1G

# InnoDB stores data in one or more data files forming the tablespace.
# If you have a single logical drive for your data, a single
# autoextending file would be good enough. In other cases, a single file
# per device is often a good choice. You can configure InnoDB to use raw
# disk partitions as well - please refer to the manual for more info
# about this.
#调整大小，默认为10M，调整为100M，因为使用的是独占表空间模式；如果是i共享表空间模式，选2G
innodb_data_file_path = ibdata1:100M:autoextend

# Number of IO threads to use for async IO operations. This value is
# hardcoded to 8 on Unix, but on Windows disk I/O may benefit from a
# larger number.
innodb_write_io_threads = 8
innodb_read_io_threads = 8

# If you run into InnoDB tablespace corruption, setting this to a nonzero
# value will likely help you to dump your tables. Start from value 1 and
# increase it until you're able to dump the table successfully.
# 恢复时需要调整强制启动模式
#innodb_force_recovery=1

# Number of threads allowed inside the InnoDB kernel. The optimal value
# depends highly on the application, hardware as well as the OS
# scheduler properties. A too high value may lead to thread thrashing.
#使用默认值
innodb_thread_concurrency = 16

# If set to 1, InnoDB will flush (fsync) the transaction logs to the
# disk at each commit, which offers full ACID behavior. If you are
# willing to compromise this safety, and you are running small
# transactions, you may set this to 0 or 2 to reduce disk I/O to the
# logs. Value 0 means that the log is only written to the log file and
# the log file flushed to disk approximately once per second. Value 2
# means the log is written to the log file at each commit, but the log
# file is only flushed to disk approximately once per second.
#事务日志记录模式，对innodb引擎影像较大，1最慢最安全，0最快最不安全，2折中
innodb_flush_log_at_trx_commit = 2

# Speed up InnoDB shutdown. This will disable InnoDB to do a full purge
# and insert buffer merge on shutdown. It may increase shutdown time a
# lot, but InnoDB will have to do it on the next startup instead.
#innodb_fast_shutdown

# The size of the buffer InnoDB uses for buffering log data. As soon as
# it is full, InnoDB will have to flush it to disk. As it is flushed
# once per second anyway, it does not make sense to have it very large
# (even with long transactions). 
#默认8M，提升有利于性能
innodb_log_buffer_size = 8M
#
# Size of each log file in a log group. You should set the combined size
# of log files to about 25%-100% of your buffer pool size to avoid
# unneeded buffer pool flush activity on log file overwrite. However,
# note that a larger logfile size will increase the time needed for the
# recovery process.
#默认256M，增大有利于性能
innodb_log_file_size = 512M
#
# Total number of files in the log group. A value of 2-3 is usually good
# enough.
innodb_log_files_in_group = 3

# Location of the InnoDB log files. Default is the MariaDB datadir. You
# may wish to point it to a dedicated hard drive or a RAID1 volume for
# improved performance
# 指定log日志目录，注释掉，让其使用通用设置的日志目录
#innodb_log_group_home_dir = /home/mysql/dblog
#
# Maximum allowed percentage of dirty pages in the InnoDB buffer pool.
# If it is reached, InnoDB will start flushing them out agressively to
# not run out of clean pages at all. This is a soft limit, not
# guaranteed to be held.
#默认值
innodb_max_dirty_pages_pct = 90
#
# The flush method InnoDB will use for Log. The tablespace always uses
# doublewrite flush logic. The default value is "fdatasync", another
# option is "O_DSYNC".
#innodb_flush_method=O_DSYNC

# How long an InnoDB transaction should wait for a lock to be granted
# before being rolled back. InnoDB automatically detects transaction
# deadlocks in its own lock table and rolls back the transaction. If you
# use the LOCK TABLES command, or other transaction-safe storage engines
# than InnoDB in the same transaction, then a deadlock may arise which
# InnoDB cannot notice. In cases like this the timeout is useful to
# resolve the situation.
innodb_lock_wait_timeout = 120

